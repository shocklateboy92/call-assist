syntax = "proto3";

package callassist.broker;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common.proto";

// Service for communication between Home Assistant Integration and Broker
// Implemented by the Broker - Home Assistant calls these methods
service BrokerIntegration {
  // Configuration management
  rpc UpdateConfiguration(ConfigurationRequest) returns (ConfigurationResponse);
  rpc UpdateCredentials(CredentialsRequest) returns (CredentialsResponse);
  
  // Call management
  rpc InitiateCall(CallRequest) returns (CallResponse);
  rpc TerminateCall(CallTerminateRequest) returns (CallTerminateResponse);
  
  // Event streaming - Home Assistant calls these when it wants current state
  rpc StreamCallEvents(google.protobuf.Empty) returns (stream callassist.common.CallEvent);
  rpc StreamContactUpdates(google.protobuf.Empty) returns (stream callassist.common.ContactUpdate);
  rpc StreamHealthStatus(google.protobuf.Empty) returns (stream callassist.common.HealthStatus);
  rpc StreamEntityUpdates(google.protobuf.Empty) returns (stream callassist.common.EntityUpdate);
  
  // Capability queries
  rpc GetSystemCapabilities(google.protobuf.Empty) returns (SystemCapabilities);
  
  // Entity management - broker decides what entities to expose
  rpc GetEntities(google.protobuf.Empty) returns (EntitiesResponse);
  
  // Schema management - get configuration schemas for protocols
  rpc GetProtocolSchemas(google.protobuf.Empty) returns (ProtocolSchemasResponse);
}

message ConfigurationRequest {
  map<string, string> camera_entities = 1;     // entity_id -> friendly_name
  map<string, string> media_player_entities = 2; // entity_id -> friendly_name
  repeated string enabled_protocols = 3;        // ["matrix", "xmpp"]
}

message ConfigurationResponse {
  bool success = 1;
  string message = 2;
}

message CredentialsRequest {
  string protocol = 1; // "matrix" or "xmpp"
  string account_id = 2; // unique account identifier (e.g., "user@matrix.org")
  string display_name = 3; // human-readable account name (e.g., "Personal Matrix")
  map<string, string> credentials = 4; // username, password, server, etc.
}

message CredentialsResponse {
  bool success = 1;
  string message = 2;
}

message CallRequest {
  string camera_entity_id = 1;
  string media_player_entity_id = 2;
  string target_address = 3;  // Matrix room ID or XMPP JID
  string protocol = 4;         // "matrix" or "xmpp"
  string account_id = 5;       // which account to use for this protocol
  callassist.common.MediaCapabilities preferred_capabilities = 6;
}

message CallResponse {
  bool success = 1;
  string call_id = 2;
  string message = 3;
  callassist.common.CallState initial_state = 4;
}

message CallTerminateRequest {
  string call_id = 1;
}

message CallTerminateResponse {
  bool success = 1;
  string message = 2;
}

message SystemCapabilities {
  callassist.common.MediaCapabilities broker_capabilities = 1;
  repeated PluginCapabilities available_plugins = 2;
}

message PluginCapabilities {
  string protocol = 1;
  string account_id = 2;       // which account this applies to
  string display_name = 3;     // human-readable account name
  bool available = 4;
  callassist.common.MediaCapabilities capabilities = 5;
}

// Generic entity system - broker decides what entities to expose
message EntitiesResponse {
  repeated EntityDefinition entities = 1;
}

message EntityDefinition {
  string entity_id = 1;           // Unique identifier
  string name = 2;                // Display name
  EntityType entity_type = 3;     // Type of entity
  string state = 4;               // Current state
  map<string, string> attributes = 5; // Additional attributes
  string icon = 6;                // MDI icon name
  bool available = 7;             // Whether entity is available
  repeated string capabilities = 8; // What actions this entity supports
}

enum EntityType {
  ENTITY_TYPE_UNKNOWN = 0;
  ENTITY_TYPE_CALL_STATION = 1;   // Camera + Media Player combo
  ENTITY_TYPE_CONTACT = 2;        // A callable contact
  ENTITY_TYPE_PLUGIN_STATUS = 3;  // Status of a protocol plugin
  ENTITY_TYPE_BROKER_STATUS = 4;  // Overall broker status
}

// Protocol configuration schema definitions
message ProtocolSchemasResponse {
  repeated ProtocolSchema schemas = 1;
}

message ProtocolSchema {
  string protocol = 1;              // e.g., "matrix", "xmpp"
  string display_name = 2;          // e.g., "Matrix", "XMPP/Jabber"
  string description = 3;           // User-friendly description
  repeated CredentialField credential_fields = 4;  // Required credential fields
  repeated SettingField setting_fields = 5;        // Optional setting fields
  repeated string example_account_ids = 6;          // Example account IDs for help
}

message CredentialField {
  string key = 1;                   // e.g., "homeserver", "access_token"
  string display_name = 2;          // e.g., "Homeserver URL", "Access Token"
  string description = 3;           // Help text
  FieldType type = 4;              // Field type
  bool required = 5;               // Whether field is required
  string default_value = 6;        // Default value if any
  repeated string allowed_values = 7; // For select fields
  bool sensitive = 8;              // Whether to mask input (passwords)
}

message SettingField {
  string key = 1;
  string display_name = 2;
  string description = 3;
  FieldType type = 4;
  bool required = 5;
  string default_value = 6;
  repeated string allowed_values = 7;
}

enum FieldType {
  FIELD_TYPE_STRING = 0;
  FIELD_TYPE_PASSWORD = 1;
  FIELD_TYPE_INTEGER = 2;
  FIELD_TYPE_BOOLEAN = 3;
  FIELD_TYPE_SELECT = 4;
  FIELD_TYPE_URL = 5;
  FIELD_TYPE_EMAIL = 6;
}

